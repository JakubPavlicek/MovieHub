openapi: 3.0.0
info:
  title: Movie Manager
  description: A movie manager API.
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Local server

components:

  parameters:

    movieId:
      name: movieId
      in: path
      schema:
        type: string
      required: true
      description: The movie ID.
    page:
      name: page
      in: query
      description: The page number for pagination.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    limit:
      name: limit
      in: query
      description: The maximum number of items to return per page.
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 10
    sort:
      name: sort
      in: query
      description: |
        A comma-separated list of sort keys.
        Valid keys are 'name', 'releaseDate', 'length', 'description', 'director'.
        Each key can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=name.desc,length.asc.
      schema:
        type: string
        default: "name.asc"
        maxLength: 200
    name:
      name: name
      in: query
      description: |
        Query parameter for filtering movies based on their name.
        
        - **Usage:**
          - Prefix the movie name with a filter operator followed by a colon `:`.
        
        - **Operators:**
            - `eq`- Equal to the specified name.
            - `like`- Name contains the specified string.
        
        - **Example:**
            - To find movies exactly named "The Conjuring", use `eq:The Conjuring`.
      schema:
        type: string
        default: "eq:"
        example: "eq:The Conjuring"
        description: pes
        maxLength: 200
    releaseDate:
      name: releaseDate
      in: query
      description: |
        Query parameter for filtering movies based on their release date.

        - **Usage:**
          - Prefix the release date with a filter operator followed by a colon `:`.

        - **Operators:**
            - `eq` - Equal to the specified date.
            - `neq` - Not equal to the specified date.
            - `lt` - Less than the specified date.
            - `gt` - Greater than the specified date.
            - `lte` - Less than or equal to the specified date.
            - `gte` - Greater than or equal to the specified date.

        - **Example:**
            - To find movies released on July 29, 2024, use `eq:2024-07-29`.
      schema:
        type: string
        default: "eq:"
        example: "eq:2024-07-29"
        maxLength: 100
    length:
      name: length
      in: query
      description: |
        Query parameter for filtering movies based on their length.

        - **Usage:**
          - Prefix the length with a filter operator followed by a colon `:`.

        - **Operators:**
            - `eq` - Equal to the specified length.
            - `neq` - Not equal to the specified length.
            - `lt` - Less than the specified length.
            - `gt` - Greater than the specified length.
            - `lte` - Less than or equal to the specified length.
            - `gte` - Greater than or equal to the specified length.

        - **Example:**
            - To find movies with a length of at least 100 minutes, use `gte:100`.
      schema:
        type: string
        default: "gte:0"
        example: "gte:100"
        maxLength: 100
    description:
      name: description
      in: query
      description: |
        Query parameter for filtering movies based on their description.

        - **Usage:**
          - Prefix the description keyword with a filter operator followed by a colon `:`.

        - **Operators:**
            - `eq` - Exact match of the specified description.
            - `like` - Description contains the specified substring.

        - **Example:**
            - To find movies with descriptions containing the word "scary", use `like:scary`.
      schema:
        type: string
        default: "like:"
        example: "like:scary"
        maxLength: 1100
    director:
      name: director
      in: query
      description: |
        Query parameter for filtering movies based on the director's name.

        - **Usage:**
          - Prefix the director's name with a filter operator followed by a colon `:`.

        - **Operators:**
            - `eq` - Exact match of the director's name.
            - `like` - Director's name contains the specified substring.

        - **Example:**
            - To find movies directed by "James Wan", use `eq:James Wan`.
      schema:
        type: string
        default: "eq:"
        example: "eq:James Wan"
        maxLength: 100
    actors:
      name: actor
      in: query
      description: |
        Query parameter for filtering movies based on the actors involved.

        - **Usage:**
          - Prefix each actor's name with a filter operator followed by a colon `:`.
          - Provide multiple values as an array if filtering by multiple actors.

        - **Operators:**
            - `eq` - Exact match for the actor's name.
            - `like` - Actor's name contains the specified substring.

        - **Example:**
            - To find movies featuring "James Wan" as an actor, use `eq:James Wan`.
            - To filter movies featuring both "James Wan" and "Vera Farmiga", use `["eq:James Wan", "eq:Vera Farmiga"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:James Wan"
          maxLength: 100
    genres:
      name: genre
      in: query
      description: |
        Query parameter for filtering movies based on their genres.

        - **Usage:**
          - Prefix each genre with a filter operator followed by a colon `:`.
          - Provide multiple genres as an array if filtering by multiple genres.

        - **Operators:**
            - `eq` - Exact match for the genre.
        
        - **Valid Values:**
          - Refer to the `GenreDTO` for a list of valid genre strings.

        - **Example:**
            - To find movies classified as "Horror", use `eq:Horror`.
            - To filter movies by multiple genres, such as "Horror" and "Thriller", use `["eq:Horror", "eq:Thriller"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:Horror"
          maxLength: 100
    countries:
      name: country
      in: query
      description: |
        Query parameter for filtering movies based on the countries of origin.

        - **Usage:**
          - Prefix each country with a filter operator followed by a colon `:`.
          - Provide multiple countries as an array if filtering by more than one country.

        - **Operators:**
            - `eq` - Exact match for the country.

        - **Valid Values:**
          - Refer to the `CountryDTO` for a list of valid genre strings.

        - **Example:**
            - To find movies from "South Korea", use `eq:South Korea`.
            - To filter movies from multiple countries, such as "South Korea" and "United States", use `["eq:South Korea", "eq:United States"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:South Korea"
          maxLength: 100

    genreId:
      name: genreId
      in: path
      required: true
      schema:
        type: string
      description: The genre ID.
      example: 6b0de5bc-8e6c-4d4c-b13e-49450d7480a7

  schemas:

    Uuid:
      type: string
      example: 872e1723-09ac-461d-9f54-d4c221269bed
      nullable: false
    MovieName:
      type: string
      example: The Conjuring
      minLength: 1
      maxLength: 100
      nullable: false
    MovieReleaseDate:
      type: string
      format: date
      example: 2024-07-29
      nullable: false
    MovieLength:
      type: integer
      format: int32
      example: 112
      minimum: 1
      nullable: false
    MovieDescription:
      type: string
      example: Paranormal investigators Ed and Lorraine Warren work to help a family terrorized by a dark presence in their farmhouse.
      minLength: 1
      maxLength: 1000
      nullable: false

    DirectorNameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: James Wan
          minLength: 1
          maxLength: 50
          nullable: false

    ActorNameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Patrick Wilson
          minLength: 1
          maxLength: 50
          nullable: false

    GenreNameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum:
            - Action
            - Adventure
            - Animation
            - Biography
            - Comedy
            - Crime
            - Documentary
            - Drama
            - Family
            - Fantasy
            - Film-Noir
            - History
            - Horror
            - Music
            - Musical
            - Mystery
            - Romance
            - Sci-Fi
            - Sport
            - Superhero
            - Thriller
            - War
            - Western
          example: Horror
          nullable: false

    CountryNameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum:
            - United States
            - Canada
            - United Kingdom
            - Australia
            - Germany
            - France
            - Italy
            - Spain
            - Japan
            - China
            - India
            - Brazil
            - Russia
            - Mexico
            - South Korea
            - South Africa
            - Netherlands
            - Sweden
            - Norway
            - Denmark
            - Finland
            - New Zealand
            - Argentina
            - Belgium
            - Switzerland
          example: Italy
          nullable: false

    MovieResponse:
      type: object
      properties:
        movieId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        length:
          $ref: '#/components/schemas/MovieLength'
        description:
          $ref: '#/components/schemas/MovieDescription'
        director:
          $ref: '#/components/schemas/DirectorDTO'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorDTO'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreDTO'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryDTO'

    DirectorDTO:
      type: object
      properties:
        directorId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: James Wan

    ActorDTO:
      type: object
      properties:
        actorId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Patrick Wilson

    GenreDTO:
      type: object
      properties:
        genreId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Horror

    CountryDTO:
      type: object
      properties:
        countryId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Italy

    AddMovieRequest:
      type: object
      required:
        - name
        - releaseDate
        - length
        - description
        - actors
        - genres
        - countries
      properties:
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        length:
          $ref: '#/components/schemas/MovieLength'
        description:
          $ref: '#/components/schemas/MovieDescription'
        director:
          $ref: '#/components/schemas/DirectorNameRequest'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorNameRequest'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreNameRequest'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryNameRequest'

    UpdateMovieRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        length:
          $ref: '#/components/schemas/MovieLength'
        description:
          $ref: '#/components/schemas/MovieDescription'
        director:
          $ref: '#/components/schemas/DirectorNameRequest'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorNameRequest'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreNameRequest'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryNameRequest'

    Sort:
      type: object
      description: "Represents sorting information for ordering query results based on one or more criteria."
      properties:
        empty:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the sorting information is empty. 
            If `true`, there are no sorting criteria defined for the query.
        sorted:
          type: boolean
          example: true
          description: |
            A boolean value indicating whether the query results are sorted. 
            If `true`, the query includes sorting criteria.
        unsorted:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the query results are unsorted. 
            If `true`, the query results are not sorted according to any criteria.
            
    Pageable:
      type: object
      description: "Represents pagination and sorting information for querying a paginated dataset."
      properties:
        pageNumber:
          type: integer
          description: "The page number to retrieve."
          example: 0
        pageSize:
          type: integer
          description: "The maximum number of elements to be returned on each page."
          example: 2
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          format: int64
          description: "The offset of the current page within the result set."
          example: 0
        paged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are paginated. 
            If `true`, the query includes pagination criteria.
          example: true
        unpaged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are not paginated. 
            If `true`, the query results are not subject to pagination.
          example: false

    MoviePage:
      type: object
      description: "Represents a page of movies, including pagination and sorting information."
      properties:
        content:
          type: array
          description: "List of movies."
          items:
            $ref: '#/components/schemas/MovieResponse'
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/Sort'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    GenreResponse:
      type: object
      description: "Object containing list of movie genres."
      properties:
        genres:
          description: "List of all possible genres for movies."
          type: array
          items:
            $ref: '#/components/schemas/GenreDTO'
          example:
            - genreId: 525d0509-028c-45da-899f-db58ea520ca7
              name: Action
            - genreId: 1a96b16b-6a4c-4392-a892-fb5108d6245c
              name: Horror

paths:
  /movies:
    post:
      description: Add movie to the database.
      summary: Add movie
      operationId: addMovie
      tags:
        - movies
      requestBody:
        description: A movie to be added to the database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequest'
      responses:
        '201':
          description: Successfully added movie to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    get:
      description: Retrieves a list of the movies.
      summary: List movies
      operationId: getMovies
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/releaseDate'
        - $ref: '#/components/parameters/length'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/director'
        - $ref: '#/components/parameters/actors'
        - $ref: '#/components/parameters/genres'
        - $ref: '#/components/parameters/countries'
      responses:
        '200':
          description: Successfully retrieved a list of movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'

  /movies/{movieId}:
    get:
      description: Retrieve detailed information about a movie with a given ID.
      summary: Get movie details
      operationId: getMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successfully retrieved the movie details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    put:
      description: Update details about a movie with a given ID.
      summary: Update movie details
      operationId: updateMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
      responses:
        '200':
          description: Successfully updated the movie details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    delete:
      description: Delete a movie with a given ID.
      summary: Delete movie
      operationId: deleteMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully deleted the movie from the database.

  /genres:
    get:
      description: List all possible genres for movies.
      summary: List genres
      operationId: getGenres
      tags:
        - genres
      responses:
        '200':
          description: Successfully retrieved a list of all possible genres for movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreResponse'

  /genres/{genreId}/movies:
    get:
      description: List all movies with the given genre.
      summary: List movies with genre
      operationId: getMoviesWithGenre
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies with the given genre.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'

