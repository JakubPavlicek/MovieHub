openapi: 3.0.0
info:
  title: Movie Manager
  description: A movie manager API.
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Local server

components:

  parameters:

    movieId:
      name: movieId
      in: path
      schema:
        type: string
      required: true
      description: The movie ID.
    page:
      name: page
      in: query
      description: The page number for pagination.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    limit:
      name: limit
      in: query
      description: The maximum number of items to return per page.
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 10
    sort:
      name: sort
      in: query
      description: |
        A comma-separated list of sort keys.
        Valid keys are 'name', 'releaseDate', 'length', 'description', 'director'.
        Each key can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=name.desc,length.asc.
      schema:
        type: string
        default: "name.asc"
        maxLength: 200
    name:
      name: name
      in: query
      description: |
        Query parameter for filtering movies based on their name.
        
        - **Usage:**
          - Prefix the movie name with a filter operator followed by a colon `:`.
        
        - **Operators:**
          - `eq`- Equal to the specified name.
          - `like`- Name contains the specified string.
        
        - **Example:**
          - To find movies exactly named "The Conjuring", use `eq:The Conjuring`.
      schema:
        type: string
        default: "eq:"
        example: "eq:The Conjuring"
        description: pes
        maxLength: 200
    releaseDate:
      name: releaseDate
      in: query
      description: |
        Query parameter for filtering movies based on their release date.

        - **Usage:**
          - Prefix the release date with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Equal to the specified date.
          - `neq` - Not equal to the specified date.
          - `lt` - Less than the specified date.
          - `gt` - Greater than the specified date.
          - `lte` - Less than or equal to the specified date.
          - `gte` - Greater than or equal to the specified date.

        - **Example:**
          - To find movies released on July 29, 2024, use `eq:2024-07-29`.
      schema:
        type: string
        default: "eq:"
        example: "eq:2024-07-29"
        maxLength: 100
    duration:
      name: duration
      in: query
      description: |
        Query parameter for filtering movies based on their duration (in minutes).

        - **Usage:**
          - Prefix the duration with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Equal to the specified duration.
          - `neq` - Not equal to the specified duration.
          - `lt` - Less than the specified duration.
          - `gt` - Greater than the specified duration.
          - `lte` - Less than or equal to the specified duration.
          - `gte` - Greater than or equal to the specified duration.

        - **Example:**
          - To find movies with a duration of at least 100 minutes, use `gte:100`.
      schema:
        type: string
        default: "gte:0"
        example: "gte:100"
        maxLength: 100
    description:
      name: description
      in: query
      description: |
        Query parameter for filtering movies based on their description.

        - **Usage:**
          - Prefix the description keyword with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Exact match of the specified description.
          - `like` - Description contains the specified substring.

        - **Example:**
          - To find movies with descriptions containing the word "scary", use `like:scary`.
      schema:
        type: string
        default: "like:"
        example: "like:scary"
        maxLength: 1100
    rating:
      name: rating
      in: query
      description: |
        Query parameter for filtering movies based on their rating.

        - **Usage:**
          - Prefix the rating value with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Exact match of the specified rating.
          - `lt` - Rating is less than the specified value.
          - `gt` - Rating is greater than the specified value.
          - `lte` - Rating is less than or equal to the specified value.
          - `gte` - Rating is greater than or equal to the specified value.

        - **Example:**
          - To find movies with ratings greater than or equal to 5.0, use `gte:5.0`.
      schema:
        type: string
        default: "gte:0"
        example: "gte:5.0"
        maxLength: 100
    reviewCount:
      name: reviewCount
      in: query
      description: |
        Query parameter for filtering movies based on the number of reviews they have received.

        - **Usage:**
          - Prefix the review count value with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Exact match of the specified review count.
          - `lt` - Review count is less than the specified value.
          - `gt` - Review count is greater than the specified value.
          - `lte` - Review count is less than or equal to the specified value.
          - `gte` - Review count is greater than or equal to the specified value.

        - **Example:**
          - To find movies with a review count greater than or equal to 10, use `gte:10`.
      schema:
        type: string
        default: "gte:0"
        example: "gte:10"
        maxLength: 100
    director:
      name: director
      in: query
      description: |
        Query parameter for filtering movies based on the director's name.

        - **Usage:**
          - Prefix the director's name with a filter operator followed by a colon `:`.

        - **Operators:**
          - `eq` - Exact match of the director's name.
          - `like` - Director's name contains the specified substring.

        - **Example:**
          - To find movies directed by "James Wan", use `eq:James Wan`.
      schema:
        type: string
        default: "eq:"
        example: "eq:James Wan"
        maxLength: 100
    actors:
      name: actor
      in: query
      description: |
        Query parameter for filtering movies based on the actors involved.

        - **Usage:**
          - Prefix each actor's name with a filter operator followed by a colon `:`.
          - Provide multiple values as an array if filtering by multiple actors.

        - **Operators:**
          - `eq` - Exact match for the actor's name.
          - `like` - Actor's name contains the specified substring.

        - **Example:**
          - To find movies featuring "James Wan" as an actor, use `eq:James Wan`.
          - To filter movies featuring both "James Wan" and "Vera Farmiga", use `["eq:James Wan", "eq:Vera Farmiga"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:James Wan"
          maxLength: 100
    genres:
      name: genre
      in: query
      description: |
        Query parameter for filtering movies based on their genres.

        - **Usage:**
          - Prefix each genre with a filter operator followed by a colon `:`.
          - Provide multiple genres as an array if filtering by multiple genres.

        - **Operators:**
          - `eq` - Exact match for the genre.
        
        - **Valid Values:**
          - Refer to the `GenreDTO` for a list of valid genre strings.

        - **Example:**
          - To find movies classified as "Horror", use `eq:Horror`.
          - To filter movies by multiple genres, such as "Horror" and "Thriller", use `["eq:Horror", "eq:Thriller"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:Horror"
          maxLength: 100
    countries:
      name: country
      in: query
      description: |
        Query parameter for filtering movies based on the countries of origin.

        - **Usage:**
          - Prefix each country with a filter operator followed by a colon `:`.
          - Provide multiple countries as an array if filtering by more than one country.

        - **Operators:**
          - `eq` - Exact match for the country.

        - **Valid Values:**
          - Refer to the `CountryDTO` for a list of valid genre strings.

        - **Example:**
          - To find movies from "South Korea", use `eq:South Korea`.
          - To filter movies from multiple countries, such as "South Korea" and "United States", use `["eq:South Korea", "eq:United States"]`.
      schema:
        type: array
        default: [ "eq:" ]
        items:
          type: string
          example: "eq:South Korea"
          maxLength: 100

    directorId:
      name: directorId
      in: path
      required: true
      schema:
        type: string
      description: The director ID.
      example: f22608f8-43bb-4a69-b77a-cb2e3eaf0dfa

    genreId:
      name: genreId
      in: path
      required: true
      schema:
        type: string
      description: The genre ID.
      example: 6b0de5bc-8e6c-4d4c-b13e-49450d7480a7

    countryId:
      name: countryId
      in: path
      required: true
      schema:
        type: string
      description: The country ID.
      example: d9ac0050-db90-44c1-a218-f93b0428a073

    companyId:
      name: companyId
      in: path
      required: true
      schema:
        type: string
      description: The production company ID.
      example: 8e9334d2-e021-4ec3-b34b-8dc57032e362

  responses:

    404MovieNotFound:
      description: Movie not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404DirectorNotFound:
      description: Director not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404GenreNotFound:
      description: Genre not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404CountryNotFound:
      description: Country not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404ProductionNotFound:
      description: Production company not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

  schemas:

    Uuid:
      type: string
      example: 872e1723-09ac-461d-9f54-d4c221269bed
      maxLength: 255
      nullable: false
    MovieName:
      type: string
      example: The Conjuring
      minLength: 1
      maxLength: 100
      nullable: false
    MovieReleaseDate:
      type: string
      format: date
      example: 2024-07-29
      nullable: false
    MovieDuration:
      type: integer
      format: int32
      example: 112
      minimum: 1
      nullable: false
    MovieDescription:
      type: string
      example: Paranormal investigators Ed and Lorraine Warren work to help a family terrorized by a dark presence in their farmhouse.
      minLength: 1
      maxLength: 1000
      nullable: false
    MovieRating:
      type: number
      format: double
      example: 7.5
      minimum: 0
      maximum: 10
      nullable: false
    MovieReviewCount:
      type: integer
      format: int32
      example: 10
      minimum: 0
      nullable: false
    MoviePosterUrl:
      type: string
      example: 'https://image.tmdb.org/t/p/original/wVYREutTvI2tmxr6ujrHT704wGF.jpg'
      nullable: false
    MovieTrailerUrl:
      type: string
      example: 'https://www.youtube.com/watch?v=k10ETZ41q5o'
      nullable: false
    PersonName:
      type: string
      example: Patrick Wilson
      minLength: 1
      maxLength: 50
      nullable: false
    PersonBio:
      type: string
      example: |
        Patrick Joseph Wilson was born in Norfolk, Virginia and raised in St. Petersburg, Florida, the son of Mary Kathryn (Burton), a voice teacher and professional singer, and John Franklin Wilson, a news anchor.
        Wilson has a B.F.A. in Drama from Carnegie-Mellon University.
        His theater work has produced many nominations and awards.
        He was nominated for Best Actor in a Musical for The Full Monty, a Drama League Award for 'Fascinating Rhythm', a Drama Drama League Award for 'Bright Lights, Big City', an Encores nomination for 'Tenderloin'.
        He had national tours in 'Carousel' (Drama Logue Award winner and L.A. Ovation nomination) and 'Miss Saigon'.
        Regionally, he has appeared in 'Sweet Bird of Youth' (La Jolla), 'Cider House Rules' (Mark Taper Forum), 'Romeo and Juliet: The Musical' (Ordway), 'Lucky in the Rain' (Goodspeed), 'Harmony' (La Jolla), and 'The Full Monty' (Globe).
        Patrick Wilson is married to actress Dagmara Dominczyk; the couple has two children.
    ActorRole:
      type: string
      example: Detective
      nullable: false
    ProductionCompanyName:
      type: string
      example: A24
      maxLength: 100
      nullable: false
    GenderName:
      type: string
      enum:
        - Unspecified
        - Male
        - Female
        - Non-binary
      example: Male
      nullable: false
    GenreName:
      type: string
      example: Horror
      maxLength: 15
      nullable: false
    CountryName:
      type: string
      example: Italy
      maxLength: 15
      nullable: false

    SortDTO:
      type: object
      description: "Represents sorting information for ordering query results based on one or more criteria."
      properties:
        empty:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the sorting information is empty. 
            If `true`, there are no sorting criteria defined for the query.
        sorted:
          type: boolean
          example: true
          description: |
            A boolean value indicating whether the query results are sorted. 
            If `true`, the query includes sorting criteria.
        unsorted:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the query results are unsorted. 
            If `true`, the query results are not sorted according to any criteria.

    PageableDTO:
      type: object
      description: "Represents pagination and sorting information for querying a paginated dataset."
      properties:
        pageNumber:
          type: integer
          description: "The page number to retrieve."
          example: 0
        pageSize:
          type: integer
          description: "The maximum number of elements to be returned on each page."
          example: 2
        sort:
          $ref: '#/components/schemas/SortDTO'
        offset:
          type: integer
          format: int64
          description: "The offset of the current page within the result set."
          example: 0
        paged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are paginated. 
            If `true`, the query includes pagination criteria.
          example: true
        unpaged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are not paginated. 
            If `true`, the query results are not subject to pagination.
          example: false

    MoviePage:
      type: object
      description: "Represents a page of movies, including pagination and sorting information."
      properties:
        content:
          type: array
          description: "List of movies."
          items:
            $ref: '#/components/schemas/MovieDetailsResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    # TODO: requests

    MovieRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/PersonName'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/MovieCastRequest'
        productionCompanies:
          type: array
          items:
            $ref: '#/components/schemas/ProductionCompanyName'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreName'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryName'

    AddMovieRequest:
      description: Request body schema for adding a movie.
      allOf:
        - $ref: '#/components/schemas/MovieRequest'
        - required:
            - name
            - releaseDate
            - duration
            - description
            - posterUrl
            - trailerUrl
            - cast
            - productionCompanies
            - genres
            - countries

    UpdateMovieRequest:
      description: Request body schema for updating a movie.
      allOf:
        - $ref: '#/components/schemas/MovieRequest'

    DirectorRequest:
      type: object
      description: Request body schema for a director.
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    AddDirectorRequest:
      description: Request body schema for adding a director.
      allOf:
        - $ref: '#/components/schemas/DirectorRequest'
        - required:
          - name
          - gender

    UpdateDirectorRequest:
      description: Request body schema for updating a director.
      allOf:
        - $ref: '#/components/schemas/DirectorRequest'

    MovieCastRequest:
      type: object
      required:
        - name
        - role
      nullable: false
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    # TODO: response

    MovieCastResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    MovieCastDetailsResponse:
      type: object
      properties:
        actorId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    MovieResponse:
      type: object
      properties:
        movieId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        rating:
          $ref: '#/components/schemas/MovieRating'
        reviewCount:
          $ref: '#/components/schemas/MovieReviewCount'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/PersonName'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/MovieCastResponse'
        productionCompanies:
          type: array
          items:
            $ref: '#/components/schemas/ProductionCompanyName'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreName'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryName'

    MovieDetailsResponse:
      type: object
      properties:
        movieId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/MovieName'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        rating:
          $ref: '#/components/schemas/MovieRating'
        reviewCount:
          $ref: '#/components/schemas/MovieReviewCount'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/DirectorDTO'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/MovieCastDetailsResponse'
        productionCompanies:
          type: array
          items:
            $ref: '#/components/schemas/ProductionCompanyDTO'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/GenreDTO'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/CountryDTO'

    DirectorDTO:
      type: object
      properties:
        directorId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: James Wan

    MovieCastDTO:
      type: object
      properties:
        actorId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    ProductionCompanyDTO:
      type: object
      properties:
        companyId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: A24

    GenreDTO:
      type: object
      properties:
        genreId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Horror

    CountryDTO:
      type: object
      properties:
        countryId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Italy

    GenderDTO:
      type: object
      properties:
        genderId:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: Male

    DirectorResponse:
      type: object
      description: Object containing list of movie directors.
      properties:
        directors:
          description: List of all movie directors.
          type: array
          items:
            $ref: '#/components/schemas/DirectorDTO'
          example:
            - directorId: c4a9f55e-1ac0-4e90-808e-dc427c6f1e7e
              name: Patrick Wilson
            - genreId: 9d813a71-bc51-4168-95ab-792422d76669
              name: Stiles White

    DirectorDetailsResponse:
      type: object
      description: Directors details.
      properties:
        directorId:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    GenreResponse:
      type: object
      description: Object containing list of movie genres.
      properties:
        genres:
          description: List of all possible genres for movies.
          type: array
          items:
            $ref: '#/components/schemas/GenreDTO'
          example:
            - genreId: 525d0509-028c-45da-899f-db58ea520ca7
              name: Action
            - genreId: 1a96b16b-6a4c-4392-a892-fb5108d6245c
              name: Horror

    CountryResponse:
      type: object
      description: Object containing list of movie countries.
      properties:
        countries:
          description: List of all possible countries for movies.
          type: array
          items:
            $ref: '#/components/schemas/CountryDTO'
          example:
            - countryId: 3d9e9db7-6544-4613-998e-88cdd6334ce1
              name: Italy
            - countryId: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: France

    ProductionCompanyResponse:
      type: object
      description: Object containing list of movie production companies.
      properties:
        companies:
          description: List of all possible production companies for movies.
          type: array
          items:
            $ref: '#/components/schemas/ProductionCompanyDTO'
          example:
            - companyId: c27fbc2f-4758-4510-b995-c0d580c3661a
              name: A24
            - companyId: 89eb6c96-4090-4a4e-be51-9114b25c785f
              name: Shudder

    GenderResponse:
      type: object
      description: Object containing list of genders.
      properties:
        genders:
          description: List of all possible genders for people.
          type: array
          items:
            $ref: '#/components/schemas/GenderDTO'
          example:
            - genderId: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: Unspecified
            - genderId: 3d9e9db7-6544-4613-998e-88cdd6334ce1
              name: Male
            - genderId: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: Female
            - genderId: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: Non-binary

    ProblemDetail:
      type: object
      title: Problem Detail
      description: "A generic error."
      properties:
        type:
          type: string
          description: "A URI reference that identifies the problem type."
          example: "http://localhost:8080/movie-not-found"
        title:
          type: string
          description: "A short, human-readable summary of the problem type."
          example: Document Not Found
        status:
          type: number
          description: "The HTTP status code."
          example: 404
        detail:
          type: string
          description: "A human-readable explanation specific to this occurrence of the problem."
          example: "Movie with ID: 11ae56ed-240e-4d4d-8d3c-f135d9394ab3 not found"
        instance:
          type: string
          description: "A URI reference that identifies the specific occurrence of the problem."
          example: "/movies/11ae56ed-240e-4d4d-8d3c-f135d9394ab3"
        contextInfo:
          type: object
          description: "A free-form based object that contains additional context about the error."
          properties:
            messages:
              type: array
              description: "More details on the error."
              items:
                type: string
              example: [ "Something went wrong", "Something else went wrong" ]

    # TODO: endpoints

paths:
  /movies:
    post:
      description: Add movie to the database.
      summary: Add movie
      operationId: addMovie
      tags:
        - movies
      requestBody:
        description: A movie to be added to the database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequest'
      responses:
        '201':
          description: Successfully added movie to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    get:
      description: Retrieves a list of the movies.
      summary: List movies
      operationId: getMovies
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/releaseDate'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/director'
        - $ref: '#/components/parameters/actors'
        - $ref: '#/components/parameters/genres'
        - $ref: '#/components/parameters/countries'
      responses:
        '200':
          description: Successfully retrieved a list of movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'

  /movies/{movieId}:
    get:
      description: Retrieve detailed information about a movie with a given ID.
      summary: Get movie details
      operationId: getMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successfully retrieved the movie details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetailsResponse'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
    put:
      description: |
        Update the details of an existing movie.
        All movie details will be replaced with the new details provided.
        For example, all the cast members provided will be saved as the new cast of the movie.
      summary: Update movie details
      operationId: updateMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
      responses:
        '200':
          description: Successfully updated the movie details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
    delete:
      description: Delete a movie with a given ID.
      summary: Delete movie
      operationId: deleteMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully deleted the movie from the database.
        '404':
          $ref: '#/components/responses/404MovieNotFound'

  /directors:
    post:
      description: Add director to the databse.
      summary: Add director
      operationId: addDirector
      tags:
        - directors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDirectorRequest'
      responses:
        '201':
          description: Successfully added a director to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDTO'
        '409':
          description: Director already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    get:
      description: List all directors of movies.
      summary: List directors
      operationId: getDirectors
      tags:
        - directors
      responses:
        '200':
          description: Successfully retrieved a list of all movie directors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorResponse'

  /directors/{directorId}:
    get:
      description: Retrieve director details by ID.
      summary: Get director details
      operationId: getDirectorById
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
      responses:
        '200':
          description: Successfully retrieved the director details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDetailsResponse'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'
    put:
      description: |
        Update the details of an existing director.
        All director's details will be replaced with the new details provided.
      summary: Update director details
      operationId: updateDirector
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectorRequest'
      responses:
        '200':
          description: Successfully updated the director details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDetailsResponse'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'

  /directors/{directorId}/movies:
    get:
      description: List all movies with the given director.
      summary: List movies with director
      operationId: getMoviesWithDirector
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies with the given director.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'

  /production-companies:
    post:
      description: Add production company to the databse.
      summary: Add production company
      operationId: addProductionCompany
      tags:
        - production-companies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProductionCompanyName'
      responses:
        '201':
          description: Successfully added a production company to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyDTO'
        '409':
          description: Production company already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    get:
      description: List all possible production companies for movies.
      summary: List production companies
      operationId: getProductionCompanies
      tags:
        - production-companies
      responses:
        '200':
          description: Successfully retrieved a list of all possible production companies for movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyResponse'

  /production-companies/{companyId}:
    get:
      description: Retrieve production company details by ID.
      summary: Get production company details
      operationId: getProductionCompanyById
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/companyId'
      responses:
        '200':
          description: Successfully retrieved the production company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyDTO'
        '404':
          $ref: '#/components/responses/404ProductionNotFound'

  /production-companies/{companyId}/movies:
    get:
      description: List all movies with the given production company.
      summary: List movies with production company
      operationId: getMoviesWithProductionCompany
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies with the given production company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404ProductionNotFound'

  /genres:
    post:
      description: Add genre to the databse.
      summary: Add genre
      operationId: addGenre
      tags:
        - genres
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/GenreName'
      responses:
        '201':
          description: Successfully added a genre to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDTO'
        '409':
          description: Genre already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    get:
      description: List all possible genres for movies.
      summary: List genres
      operationId: getGenres
      tags:
        - genres
      responses:
        '200':
          description: Successfully retrieved a list of all possible genres for movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreResponse'

  /genres/{genreId}:
    get:
      description: Retrieve genre details by ID.
      summary: Get genre details
      operationId: getGenreById
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
      responses:
        '200':
          description: Successfully retrieved the genre details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDTO'
        '404':
          $ref: '#/components/responses/404GenreNotFound'

  /genres/{genreId}/movies:
    get:
      description: List all movies with the given genre.
      summary: List movies with genre
      operationId: getMoviesWithGenre
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies with the given genre.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404GenreNotFound'

  /countries:
    post:
      description: Add country to the databse.
      summary: Add country
      operationId: addCountry
      tags:
        - countries
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/CountryName'
      responses:
        '201':
          description: Successfully added a country to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '409':
          description: Country already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    get:
      description: List all possible countries for movies.
      summary: List countries
      operationId: getCountries
      tags:
        - countries
      responses:
        '200':
          description: Successfully retrieved a list of all possible countries for movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResponse'

  /countries/{countryId}:
    get:
      description: Retrieve country details by ID.
      summary: Get country details
      operationId: getCountryById
      tags:
        - countries
      parameters:
        - $ref: '#/components/parameters/countryId'
      responses:
        '200':
          description: Successfully retrieved the country details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '404':
          $ref: '#/components/responses/404CountryNotFound'

  /countries/{countryId}/movies:
    get:
      description: List all movies with the given country.
      summary: List movies with country
      operationId: getMoviesWithCountry
      tags:
        - countries
      parameters:
        - $ref: '#/components/parameters/countryId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies with the given country.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404CountryNotFound'

  /genders:
    get:
      description: List all possible gendres for people.
      summary: List genders
      operationId: getGendres
      tags:
        - genders
      responses:
        '200':
          description: Successfully retrieved a list of all possible gendres for people.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenderResponse'
