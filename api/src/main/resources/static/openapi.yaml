openapi: 3.0.1
info:
  title: Movie Hub
  description: "A Movie Hub API."
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: "Local server"

security:
  - bearerAuth: []

components:

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:

    movieId:
      name: movieId
      in: path
      description: "The movie ID."
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      required: true
      example: 6c42ccf6-f635-48f8-9af5-4c80e6812dbf
    page:
      name: page
      in: query
      description: "The page number for pagination."
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 10000
        default: 0
        example: 0
    limit:
      name: limit
      in: query
      description: "The maximum number of items to return per page."
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 50
        default: 10
        example: 10
    sort:
      name: sort
      in: query
      description: |
        A comma-separated list of sort keys.
        Valid keys are 'name', 'releaseDate', 'duration'.
        Each key can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=name.desc,duration.asc.
      schema:
        type: string
        pattern: "^(name|releaseDate|duration)\\.(asc|desc)(,(name|releaseDate|duration)\\.(asc|desc))*$"
        maxLength: 100
        default: name.asc
        example: name.asc
    releaseYear:
      name: releaseYear
      in: query
      description: |
        Query parameter for filtering movies based on their release year. 
        Specify a four-digit year to retrieve movies released in that year (e.g., "2024").
        To retrieve movies from all years, use the value "all".
      schema:
        type: string
        pattern: "^(all|(\\d{4}(,\\d{4})*))$"
        minLength: 3
        maxLength: 300
        default: all
        example: 2024
    genre:
      name: genre
      in: query
      description: |
        Query parameter for filtering movies based on their genres. 
        You can specify one or more genres as a comma-separated list (e.g., "Thriller,Romance").
        To retrieve all movies regardless of genre, use the value "all".
      schema:
        type: string
        pattern: "^([a-zA-Z]+(,[a-zA-Z]+)*)?$"
        minLength: 1
        maxLength: 300
        example: Thriller
        default: all
    country:
      name: country
      in: query
      description: |
        Query parameter for filtering movies based on their countries. 
        You can specify one or more countries as a comma-separated list (e.g., "South Korea,Japan").
        To retrieve all movies regardless of country, use the value "all".
      schema:
        type: string
        pattern: "^([a-zA-Z ]+(,[a-zA-Z ]+)*)?$"
        minLength: 1
        maxLength: 300
        example: South Korea
        default: all

    keyword:
      name: keyword
      in: query
      description: |
        A query parameter used to filter movies based on a keyword.
        This parameter allows searching movies by matching the keyword to various fields, including the movie name, director name, actor name, and production company name.
      schema:
        type: string
        pattern: "^[A-Za-z0-9.,'\"&()\\-: ]*$"
        default: ""
        maxLength: 100

    commentId:
      name: commentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The comment ID."
      example: c9d6f870-9f9a-4dbf-9079-bb676bc5a1b5
    commentLimit:
      name: limit
      in: query
      description: "The maximum number of items to return per page."
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 5
        default: 5
        example: 5
    commentSort:
      name: sort
      in: query
      description: |
        Only valid sort key is 'createdAt'.
        It can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=createdAt.desc.
      schema:
        type: string
        pattern: "^createdAt\\.(asc|desc)$"
        default: createdAt.desc
        example: createdAt.desc
        maxLength: 200

    replyId:
      name: replyId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The reply ID."
      example: c9d6f870-9f9a-4dbf-9079-bb676bc5a1b5

    directorId:
      name: directorId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The director ID."
      example: f22608f8-43bb-4a69-b77a-cb2e3eaf0dfa

    actorId:
      name: actorId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The actor ID."
      example: c61a0a7c-c45e-41a0-9e6c-3f86beea1802

    genreId:
      name: genreId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The genre ID."
      example: 6b0de5bc-8e6c-4d4c-b13e-49450d7480a7

    countryId:
      name: countryId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The country ID."
      example: d9ac0050-db90-44c1-a218-f93b0428a073

    companyId:
      name: companyId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
        maxLength: 255
      description: "The production company ID."
      example: 8e9334d2-e021-4ec3-b34b-8dc57032e362

    name:
      name: name
      in: query
      description: "The name of the entity."
      schema:
        type: string
        pattern: "^[A-Za-zÀ-ÿ0-9.,'\"&()\\-: ]*$"
        maxLength: 255
        default: ""
      example: "James Wan"

  responses:

    404MovieNotFound:
      description: Movie not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404CommentNotFound:
      description: Comment not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404ReplyNotFound:
      description: Comment reply not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404DirectorNotFound:
      description: Director not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404ActorNotFound:
      description: Actor not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404GenreNotFound:
      description: Genre not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404CountryNotFound:
      description: Country not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404ProductionCompanyNotFound:
      description: Production company not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    401Unauthorized:
      description: Either no access token was provided or the provided access token is invalid or expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    403Forbidden:
      description: The user does not have permission to access this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    Default:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

  schemas:

    Uuid:
      type: string
      format: uuid
      description: |
        A universally unique identifier (UUID) used to uniquely identify entities.
        It is a 36-character string consisting of hexadecimal digits and hyphens.
      example: 872e1723-09ac-461d-9f54-d4c221269bed
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
      maxLength: 255
      nullable: false
    MovieName:
      type: string
      description: |
        The title of a movie.
        This field should contain the movie's name and is restricted to a maximum length of 100 characters.
      example: The Conjuring
      pattern: "^[A-Za-z0-9.,'\"&()\\-: ]+$"
      minLength: 1
      maxLength: 100
      nullable: false
    MovieReleaseDate:
      type: string
      format: date
      description: |
        The release date of the movie, formatted as `YYYY-MM-DD`.
        This indicates when the movie was officially released.
      example: 2024-07-29
      nullable: false
    MovieReleaseYear:
      type: integer
      format: int32
      description: |
        The release year of the movie.
        This indicates when the movie was officially released.
      example: 2024
      nullable: false
    MovieDuration:
      type: integer
      format: int32
      description: |
        The duration of the movie in minutes.
        This field must be a positive integer representing the total running time of the movie.
      example: 112
      minimum: 1
      maximum: 1000
      nullable: false
    MovieDescription:
      type: string
      description: |
        A detailed summary of the movie's plot or theme.
        This field can contain up to 1000 characters to provide a comprehensive overview.
      example: Paranormal investigators Ed and Lorraine Warren work to help a family terrorized by a dark presence in their farmhouse.
      minLength: 1
      maxLength: 1000
      pattern: "^[\x20-\x7E]+$"
      nullable: false
    MovieRating:
      type: number
      format: double
      description: |
        The average rating of the movie on a scale from 0 to 10.
        This value represents the general consensus of viewers.
      example: 7.5
      minimum: 0
      maximum: 10
      nullable: false
    MovieReviewCount:
      type: integer
      format: int32
      description: |
        The total number of reviews the movie has received.
        This field is a non-negative integer representing the volume of feedback.
      example: 10
      minimum: 0
      nullable: false
    MoviePosterUrl:
      type: string
      description: |
        The URL to the movie's poster image.
        This link points to the visual representation of the movie used for promotional purposes.
      example: 'https://image.tmdb.org/t/p/original/wVYREutTvI2tmxr6ujrHT704wGF.jpg'
      pattern: "^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$"
      minLength: 1
      maxLength: 2000
      nullable: false
    MovieTrailerUrl:
      type: string
      description: |
        The URL to the movie's trailer video.
        This link directs to the promotional trailer available online, typically hosted on platforms like YouTube.
      example: 'https://www.youtube.com/watch?v=k10ETZ41q5o'
      pattern: "^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$"
      minLength: 1
      maxLength: 2000
      nullable: false
    MovieFilename:
      type: string
      description: "The filename of the movie, which serves as a reference to the corresponding video file in the storage."
      example: placeholder.mp4
      pattern: "^[\\w,\\s-]+\\.[A-Za-z0-9]{3,4}$"
      minLength: 1
      maxLength: 255
      nullable: false
    PersonName:
      type: string
      description: |
        The full name of a person, such as an actor or director.
        This field contains up to 50 characters and represents the individual's name.
      example: Patrick Wilson
      pattern: "^[A-Za-zÀ-ÿ.'-]{1,50}(?:\\s[A-Za-zÀ-ÿ.'-]{1,50}){0,4}$"
      minLength: 1
      maxLength: 50
      nullable: false
    PersonBio:
      type: string
      description: |
        A biography or background information about a person, including their career and personal details.
        This field provides a comprehensive overview of the individual's life and achievements.
      minLength: 1
      maxLength: 2000
      pattern: "^[\x20-\x7E]+$"
      example: Patrick Joseph Wilson was born in Norfolk, Virginia and raised in St. Petersburg, Florida, the son of Mary Kathryn (Burton), a voice teacher and professional singer, and John Franklin Wilson, a news anchor.
    ActorRole:
      type: string
      description: |
        The role or character that an actor plays in a movie.
        This field identifies the actor's contribution to the film.
      minLength: 1
      maxLength: 100
      example: Detective
      pattern: "^[\x20-\x7E]+$"
      nullable: false
    ProductionCompanyName:
      type: string
      example: A24
      description: |
        The name of the company that produced the movie.
        This field contains up to 100 characters and represents the organization responsible for the film's production.
      pattern: "^[\x20-\x7E]+$"
      minLength: 1
      maxLength: 100
      nullable: false
    GenderName:
      type: string
      enum:
        - Unspecified
        - Male
        - Female
        - Non-binary
      description: |
        The gender identity associated with a person.
        This field includes predefined values such as Male, Female, Non-binary, or Unspecified.
      example: Male
      nullable: false
    GenreName:
      type: string
      example: Horror
      description: |
        The genre or category of the movie.
        This field represents the type of movie, such as Horror or Comedy, and is limited to 15 characters.
      pattern: "^[A-Za-z\\- ]+$"
      minLength: 1
      maxLength: 15
      nullable: false
    CountryName:
      type: string
      description: |
        The name of the country where the movie was produced or set.
        This field identifies the geographical location associated with the movie and is limited to 15 characters.
      example: Italy
      pattern: "^[A-Za-z\\- ]+$"
      minLength: 1
      maxLength: 15
      nullable: false

    MovieUserRating:
      type: object
      additionalProperties: false
      description: "The authenticated user's rating of the movie."
      required:
        - rating
      properties:
        rating:
          type: number
          format: double
          description: "The authenticated user's rating (value) of the movie."
          example: 8.0
          minimum: 0
          maximum: 10
          default: 0.0

    CommentReaction:
      type: object
      additionalProperties: false
      description: |
        An object representing the user's reaction to a specific comment. 
        Contains the ID of the comment and the type of reaction (like or dislike).
      required:
        - commentId
        - reaction
      properties:
        commentId:
          $ref: '#/components/schemas/Uuid'
        reaction:
          $ref: '#/components/schemas/Reaction'

    CommentInteractions:
      type: object
      additionalProperties: false
      description: |
        Represents the user's interactions with comments on a movie.
        This includes the reactions the user has made on comments (e.g., like or dislike) and the IDs of the comments the user has posted.
      required:
        - reactions
        - comments
      properties:
        reactions:
          type: array
          maxItems: 50
          description: |
            A list of the user's reactions to comments.
            Each reaction includes the comment ID and the type of reaction (like or dislike).
          items:
            $ref: '#/components/schemas/CommentReaction'
        comments:
          type: array
          maxItems: 50
          description: |
            A list of comment IDs representing the comments that the user has posted.
          items:
            $ref: '#/components/schemas/Uuid'

    CreatedAt:
      type: string
      format: date-time
      pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|([+-]\\d{2}:\\d{2}))?$"
      description: "The creation date of a comment."
      example: "2017-07-21T17:32:28Z"
      nullable: false
    Text:
      type: string
      example: "Very interesting movie"
      pattern: "^[\\w\\s.,!?'\"\\-@]+$"
      minLength: 1
      maxLength: 500
      nullable: false
    IsDeleted:
      type: boolean
      description: "Indicates whether the comment has been deleted."
      example: false
      nullable: false
    Likes:
      type: integer
      format: int64
      description: "The total count of likes the comment has received."
      minimum: 0
      maximum: 10000000000
      example: 5
    Dislikes:
      type: integer
      format: int64
      description: "The total count of dislikes the comment has received."
      minimum: 0
      maximum: 10000000000
      example: 2

    Reaction:
      type: string
      enum:
        - like
        - dislike
        - none
      description: "The user's reaction to the comment."
      example: like
      nullable: false

    ReactionTypeRequest:
      type: object
      additionalProperties: false
      description: "The reaction to the comment request schema."
      required:
        - reactionType
      properties:
        reactionType:
          $ref: '#/components/schemas/Reaction'

    isAuthor:
      type: boolean
      description: "Indicates if the user created the comment."
      default: false
      example: true

    UserNameAndPictureUrl:
      type: object
      additionalProperties: false
      description: "An object representing a user's nickname and their associated profile picture URL."
      required:
        - name
        - pictureUrl
      properties:
        name:
          type: string
          description: "The nickname of the user."
          pattern: "^[a-zA-Z0-9._-]{1,20}$"
          minLength: 1
          maxLength: 20
          nullable: false
        pictureUrl:
          type: string
          description: "The URL of the user's profile picture."
          pattern: "^(https?://)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$"
          minLength: 1
          maxLength: 2000
          nullable: false

    ParentCommentUuid:
      type: string
      format: uuid
      description: |
        A universally unique identifier (UUID) used to uniquely identify entities.
        It is a 36-character string consisting of hexadecimal digits and hyphens.
        This field is optional and may be null if the comment does not have a parent.
      example: 872e1723-09ac-461d-9f54-d4c221269bed
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89AB][0-9a-f]{3}-[0-9a-f]{12}$"
      maxLength: 255
      nullable: true

    SortDTO:
      type: object
      description: "Represents sorting information for ordering query results based on one or more criteria."
      additionalProperties: false
      required:
        - empty
        - sorted
        - unsorted
      properties:
        empty:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the sorting information is empty. 
            If `true`, there are no sorting criteria defined for the query.
        sorted:
          type: boolean
          example: true
          description: |
            A boolean value indicating whether the query results are sorted. 
            If `true`, the query includes sorting criteria.
        unsorted:
          type: boolean
          example: false
          description: |
            A boolean value indicating whether the query results are unsorted. 
            If `true`, the query results are not sorted according to any criteria.

    PageableDTO:
      type: object
      description: "Represents pagination and sorting information for querying a paginated dataset."
      additionalProperties: false
      required:
        - pageNumber
        - pageSize
        - sort
        - offset
        - paged
        - unpaged
      properties:
        pageNumber:
          type: integer
          description: "The page number to retrieve."
          example: 0
        pageSize:
          type: integer
          description: "The maximum number of elements to be returned on each page."
          example: 2
        sort:
          $ref: '#/components/schemas/SortDTO'
        offset:
          type: integer
          format: int64
          description: "The offset of the current page within the result set."
          example: 0
        paged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are paginated. 
            If `true`, the query includes pagination criteria.
          example: true
        unpaged:
          type: boolean
          description: |
            A boolean value indicating whether the query results are not paginated. 
            If `true`, the query results are not subject to pagination.
          example: false

    MoviePage:
      type: object
      description: "Represents a page of movies, including pagination and sorting information."
      additionalProperties: false
      required:
        - content
        - pageable
        - last
        - totalElements
        - totalPages
        - first
        - size
        - number
        - sort
        - numberOfElements
        - empty
      properties:
        content:
          type: array
          description: "List of movies."
          maxItems: 50
          items:
            $ref: '#/components/schemas/MoviePreviewResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    DirectorPage:
      type: object
      description: "Represents a page of directors, including pagination and sorting information."
      additionalProperties: false
      required:
        - content
        - pageable
        - last
        - totalElements
        - totalPages
        - first
        - size
        - number
        - sort
        - numberOfElements
        - empty
      properties:
        content:
          type: array
          description: "List of directors."
          maxItems: 50
          items:
            $ref: '#/components/schemas/DirectorDetailsResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    ActorPage:
      type: object
      description: "Represents a page of actors, including pagination and sorting information."
      additionalProperties: false
      required:
        - content
        - pageable
        - last
        - totalElements
        - totalPages
        - first
        - size
        - number
        - sort
        - numberOfElements
        - empty
      properties:
        content:
          type: array
          description: "List of actors."
          maxItems: 50
          items:
            $ref: '#/components/schemas/ActorDetailsResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    ProductionCompanyPage:
      type: object
      description: "Represents a page of production companies, including pagination and sorting information."
      additionalProperties: false
      required:
        - content
        - pageable
        - last
        - totalElements
        - totalPages
        - first
        - size
        - number
        - sort
        - numberOfElements
        - empty
      properties:
        content:
          type: array
          description: "List of production companies."
          maxItems: 50
          items:
            $ref: '#/components/schemas/ProductionCompanyDetailsResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    CommentInfoPage:
      type: object
      description: "Represents a page of comments/replies, including pagination and sorting information."
      additionalProperties: false
      required:
        - content
        - pageable
        - last
        - totalElements
        - totalPages
        - first
        - size
        - number
        - sort
        - numberOfElements
        - empty
      properties:
        content:
          type: array
          description: "List of comments/replies."
          maxItems: 50
          items:
            $ref: '#/components/schemas/CommentInfoDetailsResponse'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
        last:
          type: boolean
          description: |
            A boolean value indicating whether this is the last page of data.
            If `true`, it is the last page; otherwise, it's not the last page.
          example: false
        totalElements:
          type: integer
          format: int64
          description: "The total number of items."
          example: 4
        totalPages:
          type: integer
          description: "The total number of pages needed to display all the data based on the page size."
          example: 2
        first:
          type: boolean
          description: |
            A boolean value indicating whether this is the first page of data.
            If `true`, it is the first page; otherwise, it's not the first page.
          example: true
        size:
          type: integer
          description: "The maximum number of items contained on each page."
          example: 2
        number:
          type: integer
          description: "The page number for the current page."
          example: 0
        sort:
          $ref: '#/components/schemas/SortDTO'
        numberOfElements:
          type: integer
          description: "The number of items on the current page."
          example: 2
        empty:
          type: boolean
          description: |
            A boolean value indicating whether the current page is empty.
            If `true`, the page has no items; otherwise, it has content.
          example: false

    AddMovieRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for adding a new movie to the database.
        It requires all movie details to be provided.
      required:
        - name
        - filename
        - releaseDate
        - duration
        - description
        - posterUrl
        - trailerUrl
        - cast
        - productionCompanies
        - genres
        - countries
      properties:
        name:
          $ref: '#/components/schemas/MovieName'
        filename:
          $ref: '#/components/schemas/MovieFilename'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/PersonName'
        cast:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/MovieCastRequest'
        productionCompanies:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/ProductionCompanyName'
        genres:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/GenreName'
        countries:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/CountryName'

    UpdateMovieRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for updating an existing movie's details.
        It allows partial updates to movie information based on the existing schema.
      properties:
        name:
          $ref: '#/components/schemas/MovieName'
        filename:
          $ref: '#/components/schemas/MovieFilename'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/PersonName'
        cast:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/MovieCastRequest'
        productionCompanies:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/ProductionCompanyName'
        genres:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/GenreName'
        countries:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/CountryName'

    AddCommentRequest:
      type: object
      description: Schema for the requst body when creating a comment.
      additionalProperties: false
      required:
        - text
      properties:
        text:
          $ref: '#/components/schemas/Text'

    AddDirectorRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for adding a new director to the database.
        It requires the director's name and gender to be provided.
      required:
        - name
        - gender
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    UpdateDirectorRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for updating an existing director's details.
        It allows modifications to the director's information based on the existing schema.
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    AddActorRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for adding a new actor to the database.
        It requires the actor's name and gender to be provided.
      required:
        - name
        - gender
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    UpdateActorRequest:
      type: object
      additionalProperties: false
      description: |
        Schema for updating an existing actor's details.
        It allows changes to the actor's information based on the existing schema.
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    MovieCastRequest:
      type: object
      description: "Schema for specifying the cast of a movie, including the name of the actor and their role in the film."
      required:
        - name
        - role
      nullable: false
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    MovieCastDetailsResponse:
      type: object
      description: "Provides detailed information about a movie's cast member."
      additionalProperties: false
      required:
        - id
        - name
        - role
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        role:
          $ref: '#/components/schemas/ActorRole'

    MoviePreviewResponse:
      type: object
      description: "Offers preview representation of the movie."
      additionalProperties: false
      required:
        - id
        - name
        - releaseYear
        - duration
        - posterUrl
        - genres
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/MovieName'
        releaseYear:
          $ref: '#/components/schemas/MovieReleaseYear'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        genres:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/GenreName'

    MovieDetailsResponse:
      type: object
      description: "Offers comprehensive details about a movie."
      additionalProperties: false
      required:
        - id
        - name
        - filename
        - duration
        - description
        - rating
        - reviewCount
        - posterUrl
        - trailerUrl
        - director
        - cast
        - productionCompanies
        - genres
        - countries
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/MovieName'
        filename:
          $ref: '#/components/schemas/MovieFilename'
        releaseDate:
          $ref: '#/components/schemas/MovieReleaseDate'
        duration:
          $ref: '#/components/schemas/MovieDuration'
        description:
          $ref: '#/components/schemas/MovieDescription'
        rating:
          $ref: '#/components/schemas/MovieRating'
        reviewCount:
          $ref: '#/components/schemas/MovieReviewCount'
        posterUrl:
          $ref: '#/components/schemas/MoviePosterUrl'
        trailerUrl:
          $ref: '#/components/schemas/MovieTrailerUrl'
        director:
          $ref: '#/components/schemas/DirectorResponse'
        cast:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/MovieCastDetailsResponse'
        productionCompanies:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/ProductionCompanyDetailsResponse'
        genres:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/GenreDetailsResponse'
        countries:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/CountryDetailsResponse'

    DirectorResponse:
      type: object
      description: "Provides basic information about a director."
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'

    ProductionCompanyDetailsResponse:
      type: object
      description: "Provides details about a production company."
      additionalProperties: false
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/ProductionCompanyName'

    GenreDetailsResponse:
      type: object
      description: "Provides details about a genre."
      additionalProperties: false
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/GenreName'

    CountryDetailsResponse:
      type: object
      description: "Provides details about a country."
      additionalProperties: false
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/CountryName'

    DirectorDetailsResponse:
      type: object
      description: "Contains detailed information about a director."
      additionalProperties: false
      required:
        - id
        - name
        - gender
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    ActorDetailsResponse:
      type: object
      description: "Contains detailed information about an actor."
      additionalProperties: false
      required:
        - id
        - name
        - gender
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          $ref: '#/components/schemas/PersonName'
        bio:
          $ref: '#/components/schemas/PersonBio'
        gender:
          $ref: '#/components/schemas/GenderName'

    CommentInfoDetailsResponse:
      type: object
      description: "Contains detailed information about a comment/reply."
      additionalProperties: false
      required:
        - id
        - author
        - createdAt
        - text
        - isDeleted
        - likes
        - dislikes
        - userReaction
        - isAuthor
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        author:
          $ref: '#/components/schemas/UserNameAndPictureUrl'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        text:
          $ref: '#/components/schemas/Text'
        isDeleted:
          $ref: '#/components/schemas/IsDeleted'
        likes:
          $ref: '#/components/schemas/Likes'
        dislikes:
          $ref: '#/components/schemas/Dislikes'
        userReaction:
          $ref: '#/components/schemas/Reaction'
        isAuthor:
          $ref: '#/components/schemas/isAuthor'

    GenreListResponse:
      type: object
      description: "Provides a list of all genres available in the system."
      additionalProperties: false
      required:
        - genres
      properties:
        genres:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/GenreDetailsResponse'
          example:
            - id: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: Action
            - id: 3d9e9db7-6544-4613-998e-88cdd6334ce1
              name: Horror

    CountryListResponse:
      type: object
      description: "Provides a list of all countries available in the system."
      additionalProperties: false
      required:
        - countries
      properties:
        countries:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/CountryDetailsResponse'
          example:
            - id: 21c9c051-0bf4-4e2b-8c96-7c19895ce72f
              name: France
            - id: 3d9e9db7-6544-4613-998e-88cdd6334ce1
              name: Italy

    YearListResponse:
      type: object
      description: "Provides a list of all distinct years of the movies available in the system."
      additionalProperties: false
      required:
        - years
      properties:
        years:
          type: array
          maxItems: 200
          description: "List of years."
          items:
            type: integer
            format: int32
            minimum: 1888
            maximum: 9999
            example: 2024

    ProblemDetail:
      type: object
      title: Problem Detail
      description: "A generic error."
      additionalProperties: false
      required:
        - type
        - title
        - status
        - detail
        - instance
      properties:
        type:
          type: string
          description: "A URI reference that identifies the problem type."
          example: "http://localhost:8080/movie-not-found"
          pattern: "^((about:blank)|(https?://[^\\s]+$))"
          maxLength: 1000
        title:
          type: string
          description: "A short, human-readable summary of the problem type."
          example: "Document Not Found"
          pattern: "^[A-Za-z0-9\\s\\-.,!?:;'\"]+$"
          maxLength: 255
        status:
          type: number
          description: "The HTTP status code."
          example: 404
        detail:
          type: string
          description: "A human-readable explanation specific to this occurrence of the problem."
          example: "Movie with ID: 11ae56ed-240e-4d4d-8d3c-f135d9394ab3 not found"
          pattern: "^[A-Za-z0-9\\s\\-.,!?:;'\"]+$"
          maxLength: 1000
        instance:
          type: string
          description: "A URI reference that identifies the specific occurrence of the problem."
          example: "/movies/11ae56ed-240e-4d4d-8d3c-f135d9394ab3"
          pattern: "^(/[^\\s]*)+$"
          maxLength: 1000
        contextInfo:
          type: object
          description: "A free-form based object that contains additional context about the error."

paths:
  /movies:
    post:
      description: Create a new movie record in the database with the specified details.
      summary: Add movie
      operationId: addMovie
      security:
        - bearerAuth: []
      tags:
        - movies
      requestBody:
        description: A movie to be added to the database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequest'
      responses:
        '201':
          description: Successfully added movie to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: |
        Retrieve a list of movies in the system.
        The results can be customized with various filters, sorting options, and pagination to refine the list based on specific preferences.
      summary: List movies
      operationId: getMovies
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Successfully retrieved a list of movies in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        'default':
          $ref: '#/components/responses/Default'

  /movies/filter:
    get:
      description: |
        Filter movies using various criteria to narrow down the search results based on specific preferences.
      summary: Filter movies
      operationId: filterMovies
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/releaseYear'
        - $ref: '#/components/parameters/genre'
        - $ref: '#/components/parameters/country'
      responses:
        '200':
          description: Successfully retrieved a list of filtered movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        'default':
          $ref: '#/components/responses/Default'

  /movies/search:
    get:
      description: |
        Search for movies using a keyword.
      summary: Search movies
      operationId: searchMovies
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/keyword'
      responses:
        '200':
          description: Successfully retrieved a list of movies matching the search keyword.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        'default':
          $ref: '#/components/responses/Default'

  /movies/years:
    get:
      description: |
        Fetch distinct years of all the movies in the system.
      summary: List years
      operationId: getYears
      tags:
        - movies
      responses:
        '200':
          description: Successfully retrieved a list of all distinct years of the movies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearListResponse'
        'default':
          $ref: '#/components/responses/Default'

  /movies/{movieId}:
    get:
      description: Retrieve detailed information about a movie with the specified ID.
      summary: Get movie details
      operationId: getMovie
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successfully retrieved detailed information about the movie with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetailsResponse'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing movie.
        All movie details will be replaced with the new details provided.
        For example, all the cast members provided will be saved as the new cast of the movie.
      summary: Update movie details
      operationId: updateMovie
      security:
        - bearerAuth: []
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieRequest'
      responses:
        '200':
          description: Successfully updated the movie details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'
    delete:
      description: Delete a movie with the specified ID from the database.
      summary: Delete movie
      operationId: deleteMovie
      security:
        - bearerAuth: []
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully deleted the movie from the database.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /movies/{movieId}/ratings:
    post:
      description: Add a rating for the specified movie.
      summary: Add movie rating
      operationId: addRating
      security:
        - bearerAuth: []
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        description: The rating of the movie.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieUserRating'
      responses:
        '204':
          description: Successfully added the movie rating.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /movies/{movieId}/ratings/me:
    get:
      description: Get the current user's rating for a specified movie.
      summary: Get user's rating
      operationId: getUserRating
      security:
        - bearerAuth: []
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successfully retrieved the user's movie rating.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieUserRating'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /movies/{movieId}/comments:
    post:
      description: Add a comment for the specified movie.
      summary: Add comment
      operationId: addComment
      security:
        - bearerAuth: []
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Sucessfully added a comment for the specified movie.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'

    get:
      description: Retrieve a list of comments of the specified movie.
      summary: List comments
      operationId: getComments
      tags:
        - movies
      parameters:
        - $ref: '#/components/parameters/movieId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/commentLimit'
        - $ref: '#/components/parameters/commentSort'
      responses:
        '200':
          description: Successfully retrieved a list of comments of the specified movie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentInfoPage'
        '404':
          $ref: '#/components/responses/404MovieNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /comments/{commentId}:
    delete:
      description: Delete a comment with the specified ID.
      summary: Delete comment
      operationId: deleteComment
      security:
        - bearerAuth: []
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/commentId'
      responses:
        '204':
          description: Successfully deleted a comment with the given ID.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404CommentNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /comments/{commentId}/replies:
    post:
      description: Add a reply for the specified comment.
      summary: Add reply
      operationId: addReply
      security:
        - bearerAuth: [ ]
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/commentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Sucessfully added a reply for the specified comment.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404CommentNotFound'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of replies of the specified comment.
      summary: List replies
      operationId: getReplies
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/commentId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/commentLimit'
      responses:
        '200':
          description: Successfully retrieved a list of replies of the specified comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentInfoPage'
        '404':
          $ref: '#/components/responses/404CommentNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /comments/{commentId}/reactions:
    post:
      description: Add a reaction for a comment with the specified ID.
      summary: Add reaction to a comment
      operationId: addCommentReaction
      security:
        - bearerAuth: []
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/commentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionTypeRequest'
      responses:
        '204':
          description: Successfully reacted to the specified comment.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404CommentNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /replies/{replyId}:
    delete:
      description: Delete a comment reply with the specified ID.
      summary: Delete reply
      operationId: deleteReply
      security:
        - bearerAuth: [ ]
      tags:
        - replies
      parameters:
        - $ref: '#/components/parameters/replyId'
      responses:
        '204':
          description: Successfully deleted a reply with the given ID.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404ReplyNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /replies/{replyId}/reactions:
    post:
      description: Add a reaction for a comment reply with the specified ID.
      summary: Add reaction to a reply
      operationId: addReplyReaction
      security:
        - bearerAuth: [ ]
      tags:
        - replies
      parameters:
        - $ref: '#/components/parameters/replyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionTypeRequest'
      responses:
        '204':
          description: Successfully reacted to the specified comment reply.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404ReplyNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /directors:
    post:
      description: |
        Create a new director record in the database with the specified details.
        This operation adds a director to the system, enabling it to be used in association with movies.
      summary: Add director
      operationId: addDirector
      security:
        - bearerAuth: []
      tags:
        - directors
      requestBody:
        description: A director to be added to the database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDirectorRequest'
      responses:
        '201':
          description: Successfully added a director to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '409':
          description: The director already exists in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of directors available in the system.
      summary: List directors
      operationId: getDirectors
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved the list of directors available in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorPage'
        'default':
          $ref: '#/components/responses/Default'

  /directors/{directorId}:
    get:
      description: Retrieve detailed information about a specific director.
      summary: Get director details
      operationId: getDirector
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
      responses:
        '200':
          description: Successfully retrieved the details of the specified director.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDetailsResponse'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing director.
        All director's details will be replaced with the new details provided.
      summary: Update director details
      operationId: updateDirector
      security:
        - bearerAuth: []
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectorRequest'
      responses:
        '200':
          description: Successfully updated the details of the specified director.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /directors/{directorId}/movies:
    get:
      description: Retrieve a list of movies directed by the specified director.
      summary: List movies with director
      operationId: getMoviesWithDirector
      tags:
        - directors
      parameters:
        - $ref: '#/components/parameters/directorId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successfully retrieved a list of movies directed by the specified director.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404DirectorNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /actors:
    post:
      description: |
        Create a new actor record in the database with the specified details.
        This operation adds an actor to the system, enabling it to be used in association with movies.
      summary: Add actor
      operationId: addActor
      security:
        - bearerAuth: []
      tags:
        - actors
      requestBody:
        description: An actor to be added to the database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddActorRequest'
      responses:
        '201':
          description: Successfully added an actor to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '409':
          description: The actor already exists in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of actors available in the system.
      summary: List actors
      operationId: getActors
      tags:
        - actors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved the list of actors available in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorPage'
        'default':
          $ref: '#/components/responses/Default'

  /actors/{actorId}:
    get:
      description: Retrieve detailed information about a specific actor.
      summary: Get actor details
      operationId: getActor
      tags:
        - actors
      parameters:
        - $ref: '#/components/parameters/actorId'
      responses:
        '200':
          description: Successfully retrieved the details of the specified actor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDetailsResponse'
        '404':
          $ref: '#/components/responses/404ActorNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing actor.
        All actor's details will be replaced with the new details provided.
      summary: Update actor details
      operationId: updateActor
      security:
        - bearerAuth: []
      tags:
        - actors
      parameters:
        - $ref: '#/components/parameters/actorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActorRequest'
      responses:
        '200':
          description: Successfully updated the details of the specified actor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404ActorNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /actors/{actorId}/movies:
    get:
      description: Retrieve a list of movies in which the specified actor has appeared.
      summary: List movies with actor
      operationId: getMoviesWithActor
      tags:
        - actors
      parameters:
        - $ref: '#/components/parameters/actorId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successfully retrieved a list of movies in which the specified actor has appeared.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404ActorNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /production-companies:
    post:
      description: |
        Create a new production company record in the database with the specified details.
        This operation adds a production company to the system, enabling it to be used in association with movies.
      summary: Add production company
      operationId: addProductionCompany
      security:
        - bearerAuth: []
      tags:
        - production-companies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/ProductionCompanyName'
      responses:
        '201':
          description: Successfully created a new production company record in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '409':
          description: The production company already exists in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of production companies available in the system.
      summary: List production companies
      operationId: getProductionCompanies
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully retrieved the list of production companies available in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyPage'
        'default':
          $ref: '#/components/responses/Default'

  /production-companies/{companyId}:
    get:
      description: Retrieve detailed information about a specific production company.
      summary: Get production company details
      operationId: getProductionCompany
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/companyId'
      responses:
        '200':
          description: Successfully retrieved the details of the specified production company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyDetailsResponse'
        '404':
          $ref: '#/components/responses/404ProductionCompanyNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing production company.
        All production company's details will be replaced with the new details provided.
      summary: Update production company details
      operationId: updateProductionCompany
      security:
        - bearerAuth: []
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/companyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/ProductionCompanyName'
      responses:
        '200':
          description: Successfully updated the details of the specified production company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompanyDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404ProductionCompanyNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /production-companies/{companyId}/movies:
    get:
      description: Retrieve a list of movies that were produced by the specified company.
      summary: List movies produced by production company
      operationId: getMoviesWithProductionCompany
      tags:
        - production-companies
      parameters:
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successfully retrieved a list of movies that were produced by the specified company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404ProductionCompanyNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /genres:
    post:
      description: |
        Create a new genre record in the database with the specified details.
        This operation adds a genre to the system, enabling it to be used in association with movies.
      summary: Add genre
      operationId: addGenre
      security:
        - bearerAuth: []
      tags:
        - genres
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/GenreName'
      responses:
        '201':
          description: Successfully created a new genre record in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '409':
          description: The genre already exists in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of genres available in the system.
      summary: List genres
      operationId: getGenres
      tags:
        - genres
      responses:
        '200':
          description: Successfully retrieved the list of genres available in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreListResponse'
        'default':
          $ref: '#/components/responses/Default'

  /genres/{genreId}:
    get:
      description: Retrieve detailed information about a specific genre.
      summary: Get genre details
      operationId: getGenre
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
      responses:
        '200':
          description: Successfully retrieved the details of the specified genre.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDetailsResponse'
        '404':
          $ref: '#/components/responses/404GenreNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing genre.
        All genre's details will be replaced with the new details provided.
      summary: Update genre details
      operationId: updateGenre
      security:
        - bearerAuth: []
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/GenreName'
      responses:
        '200':
          description: Successfully updated the details of the specified genre.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404GenreNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /genres/{genreId}/movies:
    get:
      description: Retrieve a list of movies that are categorized under the specified genre.
      summary: List movies with genre
      operationId: getMoviesWithGenre
      tags:
        - genres
      parameters:
        - $ref: '#/components/parameters/genreId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successfully retrieved a list of movies that are categorized under the specified genre.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404GenreNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /countries:
    post:
      description: |
        Create a new country record in the database with the specified details.
        This operation adds a country to the system, enabling it to be used in association with movies.
      summary: Add country
      operationId: addCountry
      security:
        - bearerAuth: []
      tags:
        - countries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/CountryName'
      responses:
        '201':
          description: Successfully created a new country record in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '409':
          description: The country already exists in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        'default':
          $ref: '#/components/responses/Default'
    get:
      description: Retrieve a list of countries available in the system.
      summary: List countries
      operationId: getCountries
      tags:
        - countries
      responses:
        '200':
          description: Successfully retrieved the list of countries available in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryListResponse'
        'default':
          $ref: '#/components/responses/Default'

  /countries/{countryId}:
    get:
      description: Retrieve detailed information about a specific country.
      summary: Get country details
      operationId: getCountry
      tags:
        - countries
      parameters:
        - $ref: '#/components/parameters/countryId'
      responses:
        '200':
          description: Successfully retrieved the details of the specified country.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetailsResponse'
        '404':
          $ref: '#/components/responses/404CountryNotFound'
        'default':
          $ref: '#/components/responses/Default'
    put:
      description: |
        Update the details of an existing country.
        All country's details will be replaced with the new details provided.
      summary: Update country details
      operationId: updateCountry
      security:
        - bearerAuth: []
      tags:
        - countries
      parameters:
        - $ref: '#/components/parameters/countryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/CountryName'
      responses:
        '200':
          description: Successfully updated the details of the specified country.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetailsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404CountryNotFound'
        'default':
          $ref: '#/components/responses/Default'

  /countries/{countryId}/movies:
    get:
      description: Retrieve a list of movies that were produced in the specified country.
      summary: List movies produced in a country
      operationId: getMoviesWithCountry
      tags:
        - countries
      parameters:
        - $ref: '#/components/parameters/countryId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successfully retrieved a list of movies that were produced in the specified country.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePage'
        '404':
          $ref: '#/components/responses/404CountryNotFound'
        'default':
          $ref: '#/components/responses/Default'
